import telebot
from telebot import types
import mysql.connector
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
from datetime import datetime, timedelta


DAYS_MAPPING = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

tz = pytz.timezone('Etc/GMT+5')  # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
scheduler = BackgroundScheduler(timezone=tz)
TOKEN = '6593032799:AAFRrLjBjVRlGIzj3NLVinaYNsovw0eO-WA'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
db = mysql.connector.connect(
    host="sql11.freemysqlhosting.net",
    user="sql11653703",
    password="7r5jhb3Knu",
    database="sql11653703",
    charset = 'utf8mb4'
)
cursor = db.cursor()

def format_time(td):
    total_seconds = td.total_seconds()
    hours = int(total_seconds // 3600)
    minutes = int((total_seconds % 3600) // 60)
    return f"{hours:02}:{minutes:02}"

def main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu_button = types.KeyboardButton('–ú–µ–Ω—é')
    keyboard.add(menu_button)
    return keyboard

@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ —Ç–æ –∏–∑ –º–µ–Ω—é : "
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é")
def handle_menu(message):
    send_main_menu(message)


@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é")
def send_main_menu(message):
    markup = types.InlineKeyboardMarkup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", callback_data="days"))
    markup.add(types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_area"))
    markup.add(types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today_schedule"))
    markup.add(types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="tomorrow_schedule"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "days")
def send_days_of_week(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    cursor.execute("SELECT DISTINCT day_of_week FROM schedule")
    days = cursor.fetchall()
    for day in days:
        day_btn = types.InlineKeyboardButton(text=day[0], callback_data=day[0])
        markup.add(day_btn)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "personal_area")
def personal_area(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id, is_subscribed FROM users WHERE user_id = %s", (call.message.from_user.id,))
    user = cursor.fetchone()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not user:
        cursor.execute("INSERT INTO users (user_id, chat_id, is_subscribed) VALUES (%s, %s, FALSE)",
                       (call.message.from_user.id, call.message.chat.id))
        db.commit()
        is_subscribed = False
    else:
        is_subscribed = user[1]

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        personal_info = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if is_subscribed:
            personal_info += "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
        else:
            personal_info += "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    markup = types.InlineKeyboardMarkup()
    if is_subscribed:
        markup.add(types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe"))
    else:
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe"))


    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu"))
    bot.send_message(call.message.chat.id, personal_info, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "return_to_menu")
def return_to_menu(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)  # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    send_main_menu(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "subscribe")
def subscribe_user(call):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE users SET is_subscribed = TRUE WHERE user_id = %s", (call.message.from_user.id,))
    db.commit()

    bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")

    # –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "unsubscribe")
def unsubscribe_user(call):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE users SET is_subscribed = FALSE WHERE user_id = %s", (call.message.from_user.id,))
    db.commit()

    bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "today_schedule")
def show_today_schedule(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    today_english = datetime.now().strftime('%A')
    today_russian = DAYS_MAPPING[today_english]
    cursor.execute("SELECT lesson_number, lesson_start_time, lesson_end_time, lesson_name, room_number FROM schedule WHERE day_of_week=%s ORDER BY lesson_number", (today_russian,))
    lessons = cursor.fetchall()
    if not lessons:
        bot.send_message(call.message.chat.id, "–°–µ–≥–æ–¥–Ω—è —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç!")
        return

    response = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for lesson in lessons:
        response += f"{lesson[0]}. {lesson[3]} (–í—Ä–µ–º—è: {format_time(lesson[1])} - {format_time(lesson[2])}, –ö–∞–±–∏–Ω–µ—Ç: {lesson[4]})\n"

    bot.send_message(call.message.chat.id, response)
    bot.send_message(call.message.chat.id, " ", reply_markup=main_menu_keyboard())


@bot.callback_query_handler(func=lambda call: call.data == "tomorrow_schedule")
def show_tomorrow_schedule(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    tomorrow_english = (datetime.now() + timedelta(days=1)).strftime('%A')
    tomorrow_russian = DAYS_MAPPING[tomorrow_english]
    cursor.execute("SELECT lesson_number, lesson_start_time, lesson_end_time, lesson_name, room_number FROM schedule WHERE day_of_week=%s ORDER BY lesson_number", (tomorrow_russian,))
    lessons = cursor.fetchall()
    if not lessons:
        bot.send_message(call.message.chat.id, "–ó–∞–≤—Ç—Ä–∞ —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç ‚ù§Ô∏è‚Äçüî•")
        return

    response = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
    for lesson in lessons:
        response += f"{lesson[0]}. {lesson[3]}  || –í—Ä–µ–º—è: {format_time(lesson[1])} - {format_time(lesson[2])} ||  –ö–∞–±–∏–Ω–µ—Ç: {lesson[4]} \n"

    bot.send_message(call.message.chat.id, response)
    bot.send_message(call.message.chat.id, " ", reply_markup=main_menu_keyboard())


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    day_selected = call.data
    cursor.execute(
        "SELECT lesson_number, lesson_start_time, lesson_end_time, lesson_name, room_number FROM schedule WHERE day_of_week=%s ORDER BY lesson_number",
        (day_selected,)
    )
    lessons = cursor.fetchall()
    if lessons:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_selected}:\n\n"
        for lesson in lessons:
            response += f"{lesson[0]}. {lesson[3]} || –í—Ä–µ–º—è: {format_time(lesson[1])} - {format_time(lesson[2])} || –ö–∞–±–∏–Ω–µ—Ç: {lesson[4]}\n"

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(call.message.chat.id, call.message.message_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        bot.send_message(call.message.chat.id, text=response)
    else:
        bot.send_message(call.message.chat.id,
                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —ç—Ç–æ—Ç –¥–µ–Ω—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ '–ú–µ–Ω—é' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.")
    bot.send_message(call.message.chat.id, " ", reply_markup=main_menu_keyboard())



def send_broadcast():
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    tomorrow = datetime.now() + timedelta(days=1)
    day_of_week = tomorrow.strftime('%A').lower()  # –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—è–º –≤ –ë–î

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    cursor.execute(
        "SELECT lesson_number, lesson_start_time, lesson_end_time, lesson_name, room_number FROM schedule WHERE day_of_week=%s ORDER BY lesson_number",
        (day_of_week,))
    lessons = cursor.fetchall()

    response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_of_week.capitalize()}:\n"
    for lesson in lessons:
        response += f"{lesson[0]}. {lesson[3]} || –í—Ä–µ–º—è: {lesson[1].strftime('%H:%M')} - {lesson[2].strftime('%H:%M')} ||  –ö–∞–±–∏–Ω–µ—Ç: {lesson[4]}\n"

    # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
    cursor.execute("SELECT chat_id FROM users WHERE is_subscribed = TRUE")
    subscribers = cursor.fetchall()

    for subscriber in subscribers:
        bot.send_message(subscriber[0], response)


scheduler = BackgroundScheduler()
# –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ.
scheduler.add_job(send_broadcast, 'cron', hour=18, minute=0)
scheduler.start()

@bot.message_handler(content_types=['text'])
def handle_text(message):
    bot.send_message(message.chat.id, " –±–æ—Ç –Ω–µ —Ä–∞—Å—Å–ø–æ–∑–Ω–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ù§Ô∏è ", reply_markup=main_menu_keyboard())




bot.polling(none_stop=True)